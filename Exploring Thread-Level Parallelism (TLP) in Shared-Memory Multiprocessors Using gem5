import os
import sys
import locale
import m5
from m5.objects import *

# FORCE UTF-8 to prevent UnicodeDecodeError
os.environ["PYTHONIOENCODING"] = "utf-8"
os.environ["LC_ALL"] = "en_US.UTF-8"
os.environ["LANG"] = "en_US.UTF-8"
os.environ["LANGUAGE"] = "en_US.UTF-8"

try:
    locale.setlocale(locale.LC_ALL, "en_US.UTF-8")
except locale.Error:
    locale.setlocale(locale.LC_ALL, "C.UTF-8")

sys.stdin.reconfigure(encoding='utf-8', errors='ignore')
sys.stdout.reconfigure(encoding='utf-8', errors='ignore')
sys.stderr.reconfigure(encoding='utf-8', errors='ignore')

# Create a basic system
system = System()

# Set Clock Domain
system.clk_domain = SrcClockDomain()
system.clk_domain.clock = '1GHz'
system.clk_domain.voltage_domain = VoltageDomain()

# Create Memory Bus
system.membus = SystemXBar()

# Setup CPU
system.cpu = TimingSimpleCPU()

# L1 Cache Setup (Import caches if needed)
try:
    from caches import L1ICache, L1DCache

    system.cpu.icache = L1ICache()
    system.cpu.dcache = L1DCache()

    system.cpu.icache.connectCPU(system.cpu)
    system.cpu.dcache.connectCPU(system.cpu)

    system.cpu.icache.connectBus(system.membus)
    system.cpu.dcache.connectBus(system.membus)
except ImportError:
    print("‚ö†Ô∏è Warning: No L1 Cache found. Running without cache.")

# Memory Setup
system.mem_mode = 'timing'
system.mem_ranges = [AddrRange('512MB')]

# DRAM Setup (Fix port error)
try:
    system.mem_ctrl = DDR3_1600_8x8()
    system.mem_ctrl.range = system.mem_ranges[0]
    system.mem_ctrl.port = system.membus.mem_side_ports
except AttributeError:
    print("‚ö†Ô∏è Warning: Using alternative memory model (DDR3) due to missing port attribute.")
    system.mem_ctrl = MemCtrl()
    system.mem_ctrl.dram = DDR3_1600_8x8()
    system.mem_ctrl.dram.range = system.mem_ranges[0]
    system.mem_ctrl.dram.port = system.membus.mem_side_ports

# Connect CPU to Memory Bus
system.cpu.icache_port = system.membus.cpu_side_ports
system.cpu.dcache_port = system.membus.cpu_side_ports

# Create System Root
system.system_port = system.membus.cpu_side_ports

# Simulation
root = Root(full_system=False, system=system)
m5.instantiate()

print("üöÄ Starting Simulation...")
exit_event = m5.simulate()
print(f"Exiting @ tick {m5.curTick()} because {exit_event.getCause()}")

--------------------------------------------------------------------------------------------------------------------------------
Multi-Threaded Daxpy Kernel

import threading
import numpy as np	
def daxpy(a, x, y, start, end):
	    for i in range(start, end):
        y[i] = a * x[i] + y[I]
	
# Initialize arrays
size = 1000000
x = np.random.rand(size)
y = np.random.rand(size)
a = 2.5
num_threads = 4
threads = []
chunk_size = size // num_threads	

# Launch threads
for i in range(num_threads):
start = i * chunk_size
end = (i + 1) * chunk_size if i != num_threads - 1 else size
t = threading.Thread(target=daxpy, args=(a, x, y, start, end))
threads.append(t)
t.start()
	
# Join threads
for t in threads:
t.join()	
print("DAXPY computation completed.")
